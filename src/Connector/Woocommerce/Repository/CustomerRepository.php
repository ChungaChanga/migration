<?php

namespace App\Connector\Woocommerce\Repository;


use App\Core\ConnectorRepository\RepositoryReadAbstract;
use App\Core\Iterator\AwaitingIterator;
use App\Core\Iterator\AwaitingPageIterator;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class CustomerRepository extends RepositoryReadAbstract
{
    public function __construct(
        private HttpClientInterface $client,
    )
    {
    }
    public function fetch(int $start, int $end): array
    {
        $response = $this->client->request(
            'GET',
            'https://dl.loc/wc-api/v3/customers',
            [
                'auth_basic' => [$_ENV['WOOCOMMERCE_API_KEY'], $_ENV['WOOCOMMERCE_API_SECRET']],
            ]
        );
        return $response->toArray()['customers'];
    }

    public function fetchPage(int $page, int $pageSize): array
    {
        $response = $this->client->request(
            'GET',
            'https://dl.loc/wc-api/v3/customers',
            [
                'auth_basic' => [$_ENV['WOOCOMMERCE_API_KEY'], $_ENV['WOOCOMMERCE_API_SECRET']],
                'query' => [
                    'page' => $page,
                    'per_page' => $pageSize,
                ],
            ]
        );
        return $response->toArray()['customers'];
    }

    public function createAwaitingPageIterator(
        int $startPage,
        int $pageSize = 10,
        int $jumpSize = 0,
    ): AwaitingPageIterator
    {
        if ($startPage < 1) {
            throw new \InvalidArgumentException('start page is must be more than 0 for Woocommerce api');
        }
        return parent::createAwaitingPageIterator($startPage, $pageSize, $jumpSize); // TODO: Change the autogenerated stub
    }
}